"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const os = require("os");
const path = require("path");
const fs = require("fs-extra");
const diskusage = require("diskusage");
class NodeDiskCache {
    constructor(options = {}) {
        //缓存数据索引列表。name:文件名,size:文件大小,timer:过期计时器
        this._cacheTable = new Map();
        //当前容量
        this._currentVolume = 0;
        //文件名称自增索引
        this._fileNameIndex = 0;
        //缓存目录
        this._cacheDir = options.cacheDir || path.join(os.tmpdir(), `NodeDiskCache_${Math.trunc(Math.random() * 10000)}`);
        fs.emptyDirSync(this._cacheDir);
        //缓存容量
        if (options.volumeUpLimit > 0)
            this._volumeUpLimit = options.volumeUpLimit;
        else
            this._volumeUpLimit = diskusage.checkSync(this._cacheDir).available * Math.min(Math.max(options.volumeUpLimitRate || 0.9, 0), 1);
        //缓存超时
        this._timeout = options.timeout > 0 ? options.timeout : 0;
        this._refreshTimeoutWhenGet = !!options.refreshTimeoutWhenGet;
    }
    /**
     * 设置或更新缓存
     */
    async set(key, value) {
        const cache = this._cacheTable.get(key) || { name: path.join(this._cacheDir, (this._fileNameIndex++).toString()), size: 0, timer: undefined };
        if (this._timeout > 0)
            clearTimeout(cache.timer);
        //保存缓存
        if (Buffer.isBuffer(value)) {
            await fs.promises.writeFile(cache.name, value);
            this._currentVolume += value.length - cache.size;
            cache.size = value.length;
        }
        else {
            await new Promise((resolve, reject) => {
                value.pipe(fs.createWriteStream(cache.name))
                    .on('error', reject)
                    .on('close', resolve);
            });
            const status = await fs.promises.stat(cache.name);
            this._currentVolume += status.size - cache.size;
            cache.size = status.size;
        }
        //判断缓存是否已经超过了容量限制
        if (this._currentVolume > this._volumeUpLimit) {
            const downTo = this._volumeUpLimit * 0.9; //将缓存下降到
            for (const [ckey, value] of this._cacheTable) {
                if (key === ckey)
                    continue;
                else if (this._currentVolume > downTo) {
                    this._cacheTable.delete(ckey);
                    clearTimeout(value.timer);
                    await fs.remove(value.name);
                    this._currentVolume -= value.size;
                }
                else
                    break;
            }
        }
        if (this._timeout > 0) {
            cache.timer = setTimeout(() => {
                this._cacheTable.delete(key);
                fs.remove(cache.name, err => {
                    if (err)
                        console.error('清除缓存异常：', err);
                    else
                        this._currentVolume -= cache.size;
                });
            }, this._timeout);
        }
        this._cacheTable.set(key, cache);
    }
    /**
     * 获取缓存
     */
    async get(key) {
        const cache = this._cacheTable.get(key);
        if (cache) {
            if (this._refreshTimeoutWhenGet && this._timeout > 0) {
                clearTimeout(cache.timer);
                cache.timer = setTimeout(() => {
                    this._cacheTable.delete(key);
                    fs.remove(cache.name, err => {
                        if (err)
                            console.error('清除缓存异常：', err);
                        else
                            this._currentVolume -= cache.size;
                    });
                }, this._timeout);
            }
            return await fs.readFile(cache.name);
        }
        else
            return cache;
    }
    /**
     * 以流的方式获取缓存
     */
    getStream(key) {
        const cache = this._cacheTable.get(key);
        if (cache) {
            if (this._refreshTimeoutWhenGet && this._timeout > 0) {
                clearTimeout(cache.timer);
                cache.timer = setTimeout(() => {
                    this._cacheTable.delete(key);
                    fs.remove(cache.name, err => {
                        if (err)
                            console.error('清除缓存异常：', err);
                        else
                            this._currentVolume -= cache.size;
                    });
                }, this._timeout);
            }
            return fs.createReadStream(cache.name);
        }
        else
            return cache;
    }
    /**
     * 判断缓存是否存在
     */
    has(key) {
        return this._cacheTable.has(key);
    }
    /**
     * 删除缓存
     */
    async delete(key) {
        const cache = this._cacheTable.get(key);
        if (cache) {
            await fs.remove(cache.name);
            this._cacheTable.delete(key);
            clearTimeout(cache.timer);
            this._currentVolume -= cache.size;
        }
    }
    /**
     * 清空缓存
     */
    async empty() {
        for (const [key, value] of this._cacheTable) {
            await fs.remove(value.name);
            this._cacheTable.delete(key);
            clearTimeout(value.timer);
            this._currentVolume -= value.size;
        }
    }
}
exports.default = NodeDiskCache;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
