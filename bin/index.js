"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const os = require("os");
const path = require("path");
const fs = require("fs-extra");
const diskusage = require("diskusage");
class NodeDiskCache {
    constructor(options = {}) {
        //缓存数据索引列表。name:文件名,size:文件大小,timer:过期计时器
        this._cacheTable = new Map();
        //当前容量
        this._currentVolume = 0;
        //文件名称自增索引
        this._fileNameIndex = 0;
        //缓存目录
        this._cacheDir = options.cacheDir || path.join(os.tmpdir(), `NodeDiskCache_${Math.trunc(Math.random() * 10000)}`);
        if (NodeDiskCache._cacheDirList.has(this._cacheDir))
            throw new Error(`缓存目录已被占用：${this._cacheDir}`);
        fs.emptyDirSync(this._cacheDir);
        NodeDiskCache._cacheDirList.add(this._cacheDir);
        //清理缓存
        if (options.volumeUpLimit > 0) {
            const upLimit = options.volumeUpLimit;
            this._cleanerTimer = setInterval(() => {
                if (this._currentVolume > upLimit)
                    this._cleanCache(upLimit * 0.9);
            }, 5000);
        }
        else if (options.volumeUpLimitRate > 0) {
            const downLimitRate = 1 - Math.min(options.volumeUpLimitRate, 1);
            this._cleanerTimer = setInterval(async () => {
                try {
                    const usage = await diskusage.check(this._cacheDir);
                    if (usage.available / usage.total < downLimitRate)
                        this._cleanCache(this._currentVolume - usage.total * 0.1);
                }
                catch (err) {
                    console.error('获取缓存目录容量信息异常：', err);
                }
            }, 5000);
        }
        //缓存超时
        this._timeout = options.timeout > 0 ? options.timeout : 0;
        this._refreshTimeoutWhenGet = !!options.refreshTimeoutWhenGet;
    }
    /**
     * 获取当前的缓存大小
     */
    get size() { return this._currentVolume; }
    /**
     * 清理缓存
     * @param downTo 将缓存大小下降到指定数值之下
     */
    _cleanCache(downTo) {
        (async () => {
            for (const [key, value] of this._cacheTable) {
                if (this._currentVolume > downTo) {
                    this._cacheTable.delete(key);
                    clearTimeout(value.timer);
                    await fs.remove(value.name);
                    this._currentVolume -= value.size;
                }
                else
                    break;
            }
        })().catch(err => console.error('清除缓存异常：', err));
    }
    /**
     * 设置或更新缓存
     */
    async set(key, value) {
        const cache = this._cacheTable.get(key) || { name: path.join(this._cacheDir, (this._fileNameIndex++).toString()), size: 0, timer: undefined };
        if (this._timeout > 0 && cache.timer !== undefined)
            clearTimeout(cache.timer);
        //保存缓存
        if (Buffer.isBuffer(value)) {
            await fs.promises.writeFile(cache.name, value);
            this._currentVolume += value.length - cache.size;
            cache.size = value.length;
        }
        else {
            await new Promise((resolve, reject) => {
                value.pipe(fs.createWriteStream(cache.name))
                    .on('error', reject)
                    .on('close', resolve);
            });
            const status = await fs.promises.stat(cache.name);
            this._currentVolume += status.size - cache.size;
            cache.size = status.size;
        }
        if (this._timeout > 0) {
            cache.timer = setTimeout(() => {
                this._cacheTable.delete(key);
                fs.remove(cache.name, err => {
                    if (err)
                        console.error('清除缓存异常：', err);
                    else
                        this._currentVolume -= cache.size;
                });
            }, this._timeout);
        }
        this._cacheTable.delete(key); //刷新缓存在列表中的排位
        this._cacheTable.set(key, cache);
    }
    /**
     * 获取缓存
     */
    async get(key) {
        const cache = this._cacheTable.get(key);
        if (cache) {
            if (this._refreshTimeoutWhenGet && this._timeout > 0) {
                clearTimeout(cache.timer);
                cache.timer = setTimeout(() => {
                    this._cacheTable.delete(key);
                    fs.remove(cache.name, err => {
                        if (err)
                            console.error('清除缓存异常：', err);
                        else
                            this._currentVolume -= cache.size;
                    });
                }, this._timeout);
            }
            return await fs.readFile(cache.name);
        }
        else
            return cache;
    }
    /**
     * 以流的方式获取缓存
     */
    getStream(key) {
        const cache = this._cacheTable.get(key);
        if (cache) {
            if (this._refreshTimeoutWhenGet && this._timeout > 0) {
                clearTimeout(cache.timer);
                cache.timer = setTimeout(() => {
                    this._cacheTable.delete(key);
                    fs.remove(cache.name, err => {
                        if (err)
                            console.error('清除缓存异常：', err);
                        else
                            this._currentVolume -= cache.size;
                    });
                }, this._timeout);
            }
            return fs.createReadStream(cache.name);
        }
        else
            return cache;
    }
    /**
     * 判断缓存是否存在
     */
    has(key) {
        return this._cacheTable.has(key);
    }
    /**
     * 删除缓存
     */
    async delete(key) {
        const cache = this._cacheTable.get(key);
        if (cache) {
            await fs.remove(cache.name);
            this._cacheTable.delete(key);
            clearTimeout(cache.timer);
            this._currentVolume -= cache.size;
        }
    }
    /**
     * 清空缓存
     */
    async empty() {
        for (const [key, value] of this._cacheTable) {
            await fs.remove(value.name);
            this._cacheTable.delete(key);
            clearTimeout(value.timer);
            this._currentVolume -= value.size;
        }
    }
    /**
     * 销毁缓存
     */
    async destroy() {
        await this.empty();
        clearInterval(this._cleanerTimer);
    }
}
//缓存目录列表，防止某一缓存目录被重复使用
NodeDiskCache._cacheDirList = new Set();
exports.default = NodeDiskCache;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
