"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const os = require("os");
const path = require("path");
const fs = require("fs-extra");
const diskusage = require("diskusage");
class NodeDiskCache {
    constructor(options = {}) {
        //缓存数据索引列表。name:文件名,size:文件大小,timer:过期计时器
        this._cacheTable = new Map();
        //当前缓存大小
        this._currentSize = 0;
        //文件名称自增索引
        this._fileNameIndex = 0;
        //缓存目录
        this._cacheDir = options.cacheDir || path.join(os.tmpdir(), `NodeDiskCache_${Math.trunc(Math.random() * 10000)}`);
        if (NodeDiskCache._cacheDirList.has(this._cacheDir))
            throw new Error(`缓存目录已被占用：'${this._cacheDir}'`);
        fs.emptyDirSync(this._cacheDir);
        NodeDiskCache._cacheDirList.add(this._cacheDir);
        //清理缓存
        if (options.volumeUpLimit > 0) {
            const upLimit = options.volumeUpLimit;
            this._cleanerTimer = setInterval(() => {
                if (this._currentSize > upLimit)
                    this._cleanCache(upLimit * 0.9);
            }, 5000);
        }
        else if (options.volumeUpLimitRate > 0) {
            const downLimitRate = 1 - Math.min(options.volumeUpLimitRate, 1);
            this._cleanerTimer = setInterval(async () => {
                try {
                    const usage = await diskusage.check(this._cacheDir);
                    if (usage.available / usage.total < downLimitRate)
                        this._cleanCache(this._currentSize - usage.total * 0.1);
                }
                catch (err) {
                    console.error('获取缓存目录容量信息异常：', err);
                }
            }, 5000);
        }
        //缓存超时
        this._timeout = options.timeout > 0 ? options.timeout : 0;
        this._refreshTimeoutWhenGet = !!options.refreshTimeoutWhenGet;
    }
    /**
     * 获取当前的缓存大小
     */
    get size() { return this._currentSize; }
    /**
     * 清理缓存
     * @param downTo 将缓存大小下降到指定数值之下
     */
    async _cleanCache(downTo) {
        try {
            for (const [key, value] of this._cacheTable) {
                if (this._currentSize > downTo) {
                    this._cacheTable.delete(key);
                    clearTimeout(value.timer);
                    await fs.remove(value.name);
                    this._currentSize -= value.size;
                }
                else
                    break;
            }
        }
        catch (err) {
            console.error('清除缓存异常：', err);
        }
    }
    /**
     * 设置或更新缓存
     * @param isAppend 是否以追加到文件末尾的方式写入数据，默认false
     */
    async set(key, value, isAppend = false) {
        const cache = this._cacheTable.get(key) || { name: path.join(this._cacheDir, (this._fileNameIndex++).toString()), size: 0, timer: undefined };
        //清理旧的计时器
        if (this._timeout > 0 && cache.timer !== undefined)
            clearTimeout(cache.timer);
        //保存缓存
        if (Buffer.isBuffer(value))
            await fs.promises.writeFile(cache.name, value, { flag: isAppend ? 'a' : 'w' });
        else {
            await new Promise((resolve, reject) => {
                value.pipe(fs.createWriteStream(cache.name, { flags: isAppend ? 'a' : 'w' }))
                    .on('error', reject)
                    .on('close', resolve);
            });
        }
        //查询文件大小
        const status = await fs.promises.stat(cache.name);
        this._currentSize -= cache.size;
        cache.size = status.blksize || status.size;
        this._currentSize += cache.size;
        //设置计时器
        if (this._timeout > 0) {
            cache.timer = setTimeout(() => {
                this._cacheTable.delete(key);
                fs.remove(cache.name, err => {
                    if (err)
                        console.error('清除缓存异常：', err);
                    else
                        this._currentSize -= cache.size;
                });
            }, this._timeout);
        }
        this._cacheTable.delete(key); //刷新缓存在列表中的排位
        this._cacheTable.set(key, cache);
    }
    /**
     * 获取缓存
     */
    async get(key) {
        const cache = this._cacheTable.get(key);
        if (cache) {
            if (this._refreshTimeoutWhenGet && this._timeout > 0) {
                this._cacheTable.delete(key); //刷新缓存在列表中的排位
                this._cacheTable.set(key, cache);
                clearTimeout(cache.timer);
                cache.timer = setTimeout(() => {
                    this._cacheTable.delete(key);
                    fs.remove(cache.name, err => {
                        if (err)
                            console.error('清除缓存异常：', err);
                        else
                            this._currentSize -= cache.size;
                    });
                }, this._timeout);
            }
            return await fs.readFile(cache.name);
        }
        else
            return cache;
    }
    /**
     * 以流的方式获取缓存
     */
    getStream(key) {
        const cache = this._cacheTable.get(key);
        if (cache) {
            if (this._refreshTimeoutWhenGet && this._timeout > 0) {
                this._cacheTable.delete(key); //刷新缓存在列表中的排位
                this._cacheTable.set(key, cache);
                clearTimeout(cache.timer);
                cache.timer = setTimeout(() => {
                    this._cacheTable.delete(key);
                    fs.remove(cache.name, err => {
                        if (err)
                            console.error('清除缓存异常：', err);
                        else
                            this._currentSize -= cache.size;
                    });
                }, this._timeout);
            }
            return fs.createReadStream(cache.name);
        }
        else
            return cache;
    }
    /**
     * 判断缓存是否存在
     */
    has(key) {
        return this._cacheTable.has(key);
    }
    /**
     * 删除缓存
     */
    async delete(key) {
        const cache = this._cacheTable.get(key);
        if (cache) {
            await fs.remove(cache.name);
            this._cacheTable.delete(key);
            clearTimeout(cache.timer);
            this._currentSize -= cache.size;
        }
    }
    /**
     * 清空缓存
     */
    async empty() {
        for (const [key, value] of this._cacheTable) {
            await fs.remove(value.name);
            this._cacheTable.delete(key);
            clearTimeout(value.timer);
            this._currentSize -= value.size;
        }
    }
    /**
     * 销毁缓存
     */
    async destroy() {
        await this.empty();
        clearInterval(this._cleanerTimer);
    }
}
//缓存目录列表，防止某一缓存目录被重复使用
NodeDiskCache._cacheDirList = new Set();
exports.default = NodeDiskCache;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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bkIsYUFBYSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUN0QyxDQUFDOztBQXpORCxzQkFBc0I7QUFDRSwyQkFBYSxHQUFHLElBQUksR0FBRyxFQUFVLENBQUM7QUFUOUQsZ0NBa09DIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgb3MgZnJvbSAnb3MnO1xyXG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xyXG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcy1leHRyYSc7XHJcbmltcG9ydCAqIGFzIGRpc2t1c2FnZSBmcm9tICdkaXNrdXNhZ2UnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBOb2RlRGlza0NhY2hlT3B0aW9ucyB7XHJcbiAgICAvKipcclxuICAgICAqIOe8k+WtmOebruW9leWcsOWdgO+8jOm7mOiupCcvdG1wL05vZGVEaXNrQ2FjaGVfe3JhbmRvbX0nXHJcbiAgICAgKi9cclxuICAgIGNhY2hlRGlyPzogc3RyaW5nO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog57yT5a2Y5a656YeP5LiK6ZmQKGJ5dGUp77yM6buY6K6k5Li6MO+8jOayoeacieS4iumZkFxyXG4gICAgICovXHJcbiAgICB2b2x1bWVVcExpbWl0PzogbnVtYmVyO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Yqo5oCB55uR5rWL57yT5a2Y55uu5b2V5Ymp5L2Z5a656YeP77yM5b2T5bey55So5a656YeP5Y2g5oC75a656YeP6LaF6L+H5oyH5a6a5q+U5L6L5ZCO5omn6KGM5riF55CG5pON5L2c44CC6IyD5Zu0MC0x77yM6buY6K6kMO+8jOayoeacieS4iumZkOOAguWmguaenOiuvue9ruS6hnZvbHVtZVVwTGltaXTliJnkvJrkvb/or6XlsZ7mgKflpLHmlYhcclxuICAgICAqL1xyXG4gICAgdm9sdW1lVXBMaW1pdFJhdGU/OiBudW1iZXI7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDorr7nva7nvJPlrZjov4fmnJ/ml7bpl7QobXMp77yMMOS4uuawuOS4jei/h+acn+OAgum7mOiupDBcclxuICAgICAqL1xyXG4gICAgdGltZW91dD86IG51bWJlcjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIOW9k+iOt+WPlue8k+WtmOaXtuaYr+WQpumHjee9rnRpbWVvdXTvvIzpu5jorqRmYWxzZVxyXG4gICAgICovXHJcbiAgICByZWZyZXNoVGltZW91dFdoZW5HZXQ/OiBib29sZWFuO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOb2RlRGlza0NhY2hlIHtcclxuXHJcbiAgICAvL+e8k+WtmOaVsOaNrue0ouW8leWIl+ihqOOAgm5hbWU65paH5Lu25ZCNLHNpemU65paH5Lu25aSn5bCPLHRpbWVyOui/h+acn+iuoeaXtuWZqFxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfY2FjaGVUYWJsZSA9IG5ldyBNYXA8c3RyaW5nLCB7IG5hbWU6IHN0cmluZywgc2l6ZTogbnVtYmVyLCB0aW1lcjogTm9kZUpTLlRpbWVyIHwgdW5kZWZpbmVkIH0+KCk7XHJcblxyXG4gICAgLy/nvJPlrZjmlbDmja7lrZjmlL7nm67lvZVcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgX2NhY2hlRGlyOiBzdHJpbmc7XHJcblxyXG4gICAgLy/nvJPlrZjnm67lvZXliJfooajvvIzpmLLmraLmn5DkuIDnvJPlrZjnm67lvZXooqvph43lpI3kvb/nlKhcclxuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IF9jYWNoZURpckxpc3QgPSBuZXcgU2V0PHN0cmluZz4oKTtcclxuXHJcbiAgICAvL+e8k+WtmOi2heaXtlxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfdGltZW91dDogbnVtYmVyO1xyXG5cclxuICAgIC8v5piv5ZCm6I635Y+W57yT5a2Y5pe26YeN572udGltZW91dFxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBfcmVmcmVzaFRpbWVvdXRXaGVuR2V0OiBib29sZWFuO1xyXG5cclxuICAgIC8v5riF55CG57yT5a2Y6K6h5pe25ZmoXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9jbGVhbmVyVGltZXI6IE5vZGVKUy5UaW1lcjtcclxuXHJcbiAgICAvL+W9k+WJjee8k+WtmOWkp+Wwj1xyXG4gICAgcHJpdmF0ZSBfY3VycmVudFNpemUgPSAwO1xyXG5cclxuICAgIC8v5paH5Lu25ZCN56ew6Ieq5aKe57Si5byVXHJcbiAgICBwcml2YXRlIF9maWxlTmFtZUluZGV4ID0gMDtcclxuXHJcbiAgICAvKipcclxuICAgICAqIOiOt+WPluW9k+WJjeeahOe8k+WtmOWkp+Wwj1xyXG4gICAgICovXHJcbiAgICBnZXQgc2l6ZSgpIHsgcmV0dXJuIHRoaXMuX2N1cnJlbnRTaXplOyB9XHJcblxyXG4gICAgY29uc3RydWN0b3Iob3B0aW9uczogTm9kZURpc2tDYWNoZU9wdGlvbnMgPSB7fSkge1xyXG4gICAgICAgIC8v57yT5a2Y55uu5b2VXHJcbiAgICAgICAgdGhpcy5fY2FjaGVEaXIgPSBvcHRpb25zLmNhY2hlRGlyIHx8IHBhdGguam9pbihvcy50bXBkaXIoKSwgYE5vZGVEaXNrQ2FjaGVfJHtNYXRoLnRydW5jKE1hdGgucmFuZG9tKCkgKiAxMDAwMCl9YCk7XHJcbiAgICAgICAgaWYgKE5vZGVEaXNrQ2FjaGUuX2NhY2hlRGlyTGlzdC5oYXModGhpcy5fY2FjaGVEaXIpKVxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYOe8k+WtmOebruW9leW3suiiq+WNoOeUqO+8micke3RoaXMuX2NhY2hlRGlyfSdgKTtcclxuICAgICAgICBmcy5lbXB0eURpclN5bmModGhpcy5fY2FjaGVEaXIpO1xyXG4gICAgICAgIE5vZGVEaXNrQ2FjaGUuX2NhY2hlRGlyTGlzdC5hZGQodGhpcy5fY2FjaGVEaXIpO1xyXG5cclxuICAgICAgICAvL+a4heeQhue8k+WtmFxyXG4gICAgICAgIGlmIChvcHRpb25zLnZvbHVtZVVwTGltaXQgYXMgbnVtYmVyID4gMCkge1xyXG4gICAgICAgICAgICBjb25zdCB1cExpbWl0ID0gb3B0aW9ucy52b2x1bWVVcExpbWl0IGFzIG51bWJlcjtcclxuICAgICAgICAgICAgdGhpcy5fY2xlYW5lclRpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2N1cnJlbnRTaXplID4gdXBMaW1pdClcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jbGVhbkNhY2hlKHVwTGltaXQgKiAwLjkpO1xyXG4gICAgICAgICAgICB9LCA1MDAwKTtcclxuICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMudm9sdW1lVXBMaW1pdFJhdGUgYXMgbnVtYmVyID4gMCkge1xyXG4gICAgICAgICAgICBjb25zdCBkb3duTGltaXRSYXRlID0gMSAtIE1hdGgubWluKG9wdGlvbnMudm9sdW1lVXBMaW1pdFJhdGUgYXMgbnVtYmVyLCAxKTtcclxuICAgICAgICAgICAgdGhpcy5fY2xlYW5lclRpbWVyID0gc2V0SW50ZXJ2YWwoYXN5bmMgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB1c2FnZSA9IGF3YWl0IGRpc2t1c2FnZS5jaGVjayh0aGlzLl9jYWNoZURpcik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHVzYWdlLmF2YWlsYWJsZSAvIHVzYWdlLnRvdGFsIDwgZG93bkxpbWl0UmF0ZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2xlYW5DYWNoZSh0aGlzLl9jdXJyZW50U2l6ZSAtIHVzYWdlLnRvdGFsICogMC4xKTtcclxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ+iOt+WPlue8k+WtmOebruW9leWuuemHj+S/oeaBr+W8guW4uO+8micsIGVycik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIDUwMDApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy/nvJPlrZjotoXml7ZcclxuICAgICAgICB0aGlzLl90aW1lb3V0ID0gb3B0aW9ucy50aW1lb3V0IGFzIG51bWJlciA+IDAgPyBvcHRpb25zLnRpbWVvdXQgYXMgbnVtYmVyIDogMDtcclxuICAgICAgICB0aGlzLl9yZWZyZXNoVGltZW91dFdoZW5HZXQgPSAhIW9wdGlvbnMucmVmcmVzaFRpbWVvdXRXaGVuR2V0O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5riF55CG57yT5a2YXHJcbiAgICAgKiBAcGFyYW0gZG93blRvIOWwhue8k+WtmOWkp+Wwj+S4i+mZjeWIsOaMh+WumuaVsOWAvOS5i+S4i1xyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGFzeW5jIF9jbGVhbkNhY2hlKGRvd25UbzogbnVtYmVyKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgdGhpcy5fY2FjaGVUYWJsZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2N1cnJlbnRTaXplID4gZG93blRvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2FjaGVUYWJsZS5kZWxldGUoa2V5KTtcclxuICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodmFsdWUudGltZXIgYXMgYW55KTtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCBmcy5yZW1vdmUodmFsdWUubmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudFNpemUgLT0gdmFsdWUuc2l6ZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ+a4hemZpOe8k+WtmOW8guW4uO+8micsIGVycik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6K6+572u5oiW5pu05paw57yT5a2YXHJcbiAgICAgKiBAcGFyYW0gaXNBcHBlbmQg5piv5ZCm5Lul6L+95Yqg5Yiw5paH5Lu25pyr5bC+55qE5pa55byP5YaZ5YWl5pWw5o2u77yM6buY6K6kZmFsc2VcclxuICAgICAqL1xyXG4gICAgYXN5bmMgc2V0KGtleTogc3RyaW5nLCB2YWx1ZTogQnVmZmVyIHwgTm9kZUpTLlJlYWRhYmxlU3RyZWFtLCBpc0FwcGVuZCA9IGZhbHNlKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgY29uc3QgY2FjaGUgPSB0aGlzLl9jYWNoZVRhYmxlLmdldChrZXkpIHx8IHsgbmFtZTogcGF0aC5qb2luKHRoaXMuX2NhY2hlRGlyLCAodGhpcy5fZmlsZU5hbWVJbmRleCsrKS50b1N0cmluZygpKSwgc2l6ZTogMCwgdGltZXI6IHVuZGVmaW5lZCB9O1xyXG5cclxuICAgICAgICAvL+a4heeQhuaXp+eahOiuoeaXtuWZqFxyXG4gICAgICAgIGlmICh0aGlzLl90aW1lb3V0ID4gMCAmJiBjYWNoZS50aW1lciAhPT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQoY2FjaGUudGltZXIpO1xyXG5cclxuICAgICAgICAvL+S/neWtmOe8k+WtmFxyXG4gICAgICAgIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsdWUpKVxyXG4gICAgICAgICAgICBhd2FpdCBmcy5wcm9taXNlcy53cml0ZUZpbGUoY2FjaGUubmFtZSwgdmFsdWUsIHsgZmxhZzogaXNBcHBlbmQgPyAnYScgOiAndycgfSk7XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgICAgIHZhbHVlLnBpcGUoZnMuY3JlYXRlV3JpdGVTdHJlYW0oY2FjaGUubmFtZSwgeyBmbGFnczogaXNBcHBlbmQgPyAnYScgOiAndycgfSkpXHJcbiAgICAgICAgICAgICAgICAgICAgLm9uKCdlcnJvcicsIHJlamVjdClcclxuICAgICAgICAgICAgICAgICAgICAub24oJ2Nsb3NlJywgcmVzb2x2ZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy/mn6Xor6Lmlofku7blpKflsI9cclxuICAgICAgICBjb25zdCBzdGF0dXMgPSBhd2FpdCBmcy5wcm9taXNlcy5zdGF0KGNhY2hlLm5hbWUpO1xyXG4gICAgICAgIHRoaXMuX2N1cnJlbnRTaXplIC09IGNhY2hlLnNpemU7XHJcbiAgICAgICAgY2FjaGUuc2l6ZSA9IHN0YXR1cy5ibGtzaXplIHx8IHN0YXR1cy5zaXplO1xyXG4gICAgICAgIHRoaXMuX2N1cnJlbnRTaXplICs9IGNhY2hlLnNpemU7XHJcblxyXG4gICAgICAgIC8v6K6+572u6K6h5pe25ZmoXHJcbiAgICAgICAgaWYgKHRoaXMuX3RpbWVvdXQgPiAwKSB7XHJcbiAgICAgICAgICAgIGNhY2hlLnRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZVRhYmxlLmRlbGV0ZShrZXkpO1xyXG4gICAgICAgICAgICAgICAgZnMucmVtb3ZlKGNhY2hlLm5hbWUsIGVyciA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycilcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcign5riF6Zmk57yT5a2Y5byC5bi477yaJywgZXJyKTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRTaXplIC09IGNhY2hlLnNpemU7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSwgdGhpcy5fdGltZW91dCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9jYWNoZVRhYmxlLmRlbGV0ZShrZXkpOyAgIC8v5Yi35paw57yT5a2Y5Zyo5YiX6KGo5Lit55qE5o6S5L2NXHJcbiAgICAgICAgdGhpcy5fY2FjaGVUYWJsZS5zZXQoa2V5LCBjYWNoZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5bnvJPlrZhcclxuICAgICAqL1xyXG4gICAgYXN5bmMgZ2V0KGtleTogc3RyaW5nKTogUHJvbWlzZTxCdWZmZXIgfCB1bmRlZmluZWQ+IHtcclxuICAgICAgICBjb25zdCBjYWNoZSA9IHRoaXMuX2NhY2hlVGFibGUuZ2V0KGtleSk7XHJcblxyXG4gICAgICAgIGlmIChjYWNoZSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fcmVmcmVzaFRpbWVvdXRXaGVuR2V0ICYmIHRoaXMuX3RpbWVvdXQgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZVRhYmxlLmRlbGV0ZShrZXkpOyAgIC8v5Yi35paw57yT5a2Y5Zyo5YiX6KGo5Lit55qE5o6S5L2NXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZVRhYmxlLnNldChrZXksIGNhY2hlKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoY2FjaGUudGltZXIgYXMgYW55KTtcclxuICAgICAgICAgICAgICAgIGNhY2hlLnRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2FjaGVUYWJsZS5kZWxldGUoa2V5KTtcclxuICAgICAgICAgICAgICAgICAgICBmcy5yZW1vdmUoY2FjaGUubmFtZSwgZXJyID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ+a4hemZpOe8k+WtmOW8guW4uO+8micsIGVycik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRTaXplIC09IGNhY2hlLnNpemU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9LCB0aGlzLl90aW1lb3V0KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IGZzLnJlYWRGaWxlKGNhY2hlLm5hbWUpO1xyXG4gICAgICAgIH0gZWxzZVxyXG4gICAgICAgICAgICByZXR1cm4gY2FjaGU7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDku6XmtYHnmoTmlrnlvI/ojrflj5bnvJPlrZhcclxuICAgICAqL1xyXG4gICAgZ2V0U3RyZWFtKGtleTogc3RyaW5nKTogTm9kZUpTLlJlYWRhYmxlU3RyZWFtIHwgdW5kZWZpbmVkIHtcclxuICAgICAgICBjb25zdCBjYWNoZSA9IHRoaXMuX2NhY2hlVGFibGUuZ2V0KGtleSk7XHJcblxyXG4gICAgICAgIGlmIChjYWNoZSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fcmVmcmVzaFRpbWVvdXRXaGVuR2V0ICYmIHRoaXMuX3RpbWVvdXQgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZVRhYmxlLmRlbGV0ZShrZXkpOyAgIC8v5Yi35paw57yT5a2Y5Zyo5YiX6KGo5Lit55qE5o6S5L2NXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZVRhYmxlLnNldChrZXksIGNhY2hlKTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGNhY2hlLnRpbWVyIGFzIGFueSk7XHJcbiAgICAgICAgICAgICAgICBjYWNoZS50aW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlVGFibGUuZGVsZXRlKGtleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZnMucmVtb3ZlKGNhY2hlLm5hbWUsIGVyciA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCfmuIXpmaTnvJPlrZjlvILluLjvvJonLCBlcnIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50U2l6ZSAtPSBjYWNoZS5zaXplO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSwgdGhpcy5fdGltZW91dCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBmcy5jcmVhdGVSZWFkU3RyZWFtKGNhY2hlLm5hbWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHJldHVybiBjYWNoZTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWIpOaWree8k+WtmOaYr+WQpuWtmOWcqCBcclxuICAgICAqL1xyXG4gICAgaGFzKGtleTogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlVGFibGUuaGFzKGtleSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDliKDpmaTnvJPlrZhcclxuICAgICAqL1xyXG4gICAgYXN5bmMgZGVsZXRlKGtleTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgY29uc3QgY2FjaGUgPSB0aGlzLl9jYWNoZVRhYmxlLmdldChrZXkpO1xyXG5cclxuICAgICAgICBpZiAoY2FjaGUpIHtcclxuICAgICAgICAgICAgYXdhaXQgZnMucmVtb3ZlKGNhY2hlLm5hbWUpO1xyXG4gICAgICAgICAgICB0aGlzLl9jYWNoZVRhYmxlLmRlbGV0ZShrZXkpO1xyXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQoY2FjaGUudGltZXIgYXMgYW55KTtcclxuICAgICAgICAgICAgdGhpcy5fY3VycmVudFNpemUgLT0gY2FjaGUuc2l6ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmuIXnqbrnvJPlrZhcclxuICAgICAqL1xyXG4gICAgYXN5bmMgZW1wdHkoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgdGhpcy5fY2FjaGVUYWJsZSkge1xyXG4gICAgICAgICAgICBhd2FpdCBmcy5yZW1vdmUodmFsdWUubmFtZSk7XHJcbiAgICAgICAgICAgIHRoaXMuX2NhY2hlVGFibGUuZGVsZXRlKGtleSk7XHJcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh2YWx1ZS50aW1lciBhcyBhbnkpO1xyXG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50U2l6ZSAtPSB2YWx1ZS5zaXplO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOmUgOavgee8k+WtmFxyXG4gICAgICovXHJcbiAgICBhc3luYyBkZXN0cm95KCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgICAgIGF3YWl0IHRoaXMuZW1wdHkoKTtcclxuICAgICAgICBjbGVhckludGVydmFsKHRoaXMuX2NsZWFuZXJUaW1lcik7XHJcbiAgICB9XHJcbn0iXX0=
