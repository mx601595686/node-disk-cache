"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const os = require("os");
const path = require("path");
const fs = require("fs-extra");
const diskusage = require("diskusage");
class NodeDiskCache {
    constructor(options = {}) {
        //缓存数据索引列表。name:文件名,size:文件大小,timer:过期计时器
        this._cacheTable = new Map();
        //当前缓存大小
        this._currentSize = 0;
        //文件名称自增索引
        this._fileNameIndex = 0;
        //缓存目录
        this._cacheDir = options.cacheDir || path.join(os.tmpdir(), `NodeDiskCache_${Math.trunc(Math.random() * 10000)}`);
        if (NodeDiskCache._cacheDirList.has(this._cacheDir))
            throw new Error(`缓存目录已被占用：'${this._cacheDir}'`);
        fs.emptyDirSync(this._cacheDir);
        NodeDiskCache._cacheDirList.add(this._cacheDir);
        //清理缓存
        if (options.volumeUpLimit > 0) {
            const upLimit = options.volumeUpLimit;
            this._cleanerTimer = setInterval(() => {
                if (this._currentSize > upLimit)
                    this._cleanCache(upLimit * 0.9);
            }, 5000);
        }
        else if (options.volumeUpLimitRate > 0) {
            const upLimitRate = Math.min(options.volumeUpLimitRate, 1);
            const downLimitRate = 1 - upLimitRate;
            this._cleanerTimer = setInterval(async () => {
                try {
                    const usage = await diskusage.check(this._cacheDir);
                    if (usage.available / usage.total < downLimitRate)
                        this._cleanCache(this._currentSize - usage.total * upLimitRate * 0.1);
                }
                catch (err) {
                    console.error('获取缓存目录容量信息异常：', err);
                }
            }, 5000);
        }
        //缓存超时
        this._timeout = options.timeout > 0 ? options.timeout : 0;
        this._refreshTimeoutWhenGet = !!options.refreshTimeoutWhenGet;
    }
    /**
     * 获取当前的缓存大小
     */
    get size() { return this._currentSize; }
    /**
     * 清理缓存
     * @param downTo 将缓存大小下降到指定数值之下
     */
    async _cleanCache(downTo) {
        try {
            for (const [key, value] of this._cacheTable) {
                if (this._currentSize > downTo) {
                    this._cacheTable.delete(key);
                    clearTimeout(value.timer);
                    await fs.remove(value.name);
                    this._currentSize -= value.size;
                }
                else
                    break;
            }
        }
        catch (err) {
            console.error('清除缓存异常：', err);
        }
    }
    /**
     * 在执行set之前做的一些准备工作
     * @param writer 执行文件读取操作的方法
     */
    async _prepareSet(key, writer) {
        let cache = this._cacheTable.get(key);
        if (cache) {
            if (this._timeout > 0)
                clearTimeout(cache.timer); //清理旧的计时器
            try {
                //执行存储方法
                await writer(cache.name);
                //查询文件大小
                const status = await fs.promises.stat(cache.name);
                this._currentSize -= cache.size;
                cache.size = status.blksize || status.size;
                this._currentSize += cache.size;
            }
            finally {
                //设置计时器
                if (this._timeout > 0) {
                    cache.timer = setTimeout(() => {
                        this._cacheTable.delete(key);
                        fs.remove(cache.name, err => {
                            if (err)
                                console.error('清除缓存异常：', err);
                            else
                                this._currentSize -= cache.size;
                        });
                    }, this._timeout);
                }
            }
            this._cacheTable.delete(key); //刷新缓存在列表中的排位
            this._cacheTable.set(key, cache);
        }
        else {
            cache = { name: path.join(this._cacheDir, (this._fileNameIndex++).toString()), size: 0, timer: undefined };
            //执行存储方法
            await writer(cache.name);
            //查询文件大小
            const status = await fs.promises.stat(cache.name);
            cache.size = status.blksize || status.size;
            this._currentSize += cache.size;
            //设置计时器
            if (this._timeout > 0) {
                cache.timer = setTimeout(() => {
                    this._cacheTable.delete(key);
                    fs.remove(cache.name, err => {
                        if (err)
                            console.error('清除缓存异常：', err);
                        else
                            this._currentSize -= cache.size;
                    });
                }, this._timeout);
            }
            this._cacheTable.set(key, cache);
        }
    }
    /**
     * 在执行get之前做的一些准备工作
     * @param reader 执行文件读取操作的方法
     */
    async _prepareGet(key, reader) {
        const cache = this._cacheTable.get(key);
        if (cache) {
            if (this._refreshTimeoutWhenGet && this._timeout > 0) {
                this._cacheTable.delete(key); //刷新缓存在列表中的排位
                this._cacheTable.set(key, cache);
                cache.timer.refresh();
            }
            return reader(cache.name);
        }
        else
            return cache;
    }
    /**
     * 设置或更新缓存
     * @param isAppend 是否以追加到文件末尾的方式写入数据，默认false
     */
    set(key, value, isAppend = false) {
        return this._prepareSet(key, path => {
            if ('string' === typeof value || Buffer.isBuffer(value))
                return fs.promises.writeFile(path, value, { flag: isAppend ? 'a' : 'w' });
            else {
                return new Promise((resolve, reject) => {
                    value.pipe(fs.createWriteStream(path, { flags: isAppend ? 'a' : 'w' }))
                        .on('error', reject)
                        .on('close', resolve);
                });
            }
        });
    }
    /**
     * 通过移动现存文件的方式设置或更新缓存
     * @param from 要移动文件的路径
     */
    setByMove(key, from) {
        return this._prepareSet(key, path => fs.move(from, path));
    }
    /**
     * 获取缓存
     */
    get(key) {
        return this._prepareGet(key, fs.readFile);
    }
    /**
     * 以流的方式获取缓存
     */
    getStream(key) {
        return this._prepareGet(key, async (path) => fs.createReadStream(path));
    }
    /**
     * 判断缓存是否存在
     */
    has(key) {
        return this._cacheTable.has(key);
    }
    /**
     * 删除缓存
     */
    async delete(key) {
        const cache = this._cacheTable.get(key);
        if (cache) {
            await fs.remove(cache.name);
            this._cacheTable.delete(key);
            clearTimeout(cache.timer);
            this._currentSize -= cache.size;
        }
    }
    /**
     * 清空缓存
     */
    async empty() {
        for (const [key, value] of this._cacheTable) {
            await fs.remove(value.name);
            this._cacheTable.delete(key);
            clearTimeout(value.timer);
            this._currentSize -= value.size;
        }
    }
    /**
     * 销毁缓存
     */
    async destroy() {
        await this.empty();
        clearInterval(this._cleanerTimer);
    }
}
//缓存目录列表，防止某一缓存目录被重复使用
NodeDiskCache._cacheDirList = new Set();
exports.default = NodeDiskCache;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
