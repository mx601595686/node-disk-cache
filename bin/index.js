"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const os = require("os");
const path = require("path");
const fs = require("fs-extra");
const diskusage = require("diskusage");
class NodeDiskCache {
    constructor(options = {}) {
        //缓存索引列表
        this._cacheItems = new Map();
        //当前缓存大小
        this._currentSize = 0;
        //文件名称自增索引
        this._fileNameIndex = 0;
        //缓存目录
        this._cacheDir = options.cacheDir || path.join(os.tmpdir(), `NodeDiskCache_${Math.trunc(Math.random() * 10000)}`);
        if (NodeDiskCache._cacheDirList.has(this._cacheDir))
            throw new Error(`缓存目录已被占用：'${this._cacheDir}'`);
        fs.emptyDirSync(this._cacheDir);
        NodeDiskCache._cacheDirList.add(this._cacheDir);
        //清理缓存
        if (options.volumeUpLimit > 0) {
            const upLimit = options.volumeUpLimit;
            const cleanAmount = Math.min(options.cleanAmount || 0.1, 1);
            const downTo = upLimit * (1 - cleanAmount);
            this._cleanerTimer = setInterval(async () => {
                if (this._currentSize > upLimit) {
                    for (const item of this._cacheItems) {
                        if (this._currentSize > downTo)
                            await this.delete(item[0], item[1]);
                        else
                            break;
                    }
                }
            }, options.cleanInterval || 60 * 1000);
        }
        else if (options.volumeUpLimitRate > 0) {
            const upLimitRate = Math.min(options.volumeUpLimitRate, 1);
            const downLimitRate = 1 - upLimitRate;
            const cleanAmount = Math.min(options.cleanAmount || 0.1, 1);
            this._cleanerTimer = setInterval(async () => {
                try {
                    const usage = await diskusage.check(this._cacheDir);
                    if (usage.available / usage.total < downLimitRate) {
                        const downTo = this._currentSize - usage.total * upLimitRate * cleanAmount;
                        for (const item of this._cacheItems) {
                            if (this._currentSize > downTo)
                                await this.delete(item[0], item[1]);
                            else
                                break;
                        }
                    }
                }
                catch (err) {
                    console.error('获取缓存目录容量信息异常：', err);
                }
            }, options.cleanInterval || 60 * 1000);
        }
        //默认缓存超时
        this._defaultTimeout = options.timeout > 0 ? options.timeout : 0;
        this._defaultRefreshTimeoutWhenGet = !!options.refreshTimeoutWhenGet;
    }
    /**
     * 获取当前的缓存大小
     */
    get size() { return this._currentSize; }
    /**
     * 在执行set之前做的一些准备工作
     * @param writer 执行文件写入操作的方法
     */
    async _prepareWrite(writer, key, timeout, refreshTimeoutWhenGet, related) {
        const cache = this._cacheItems.get(key) || {
            filePath: path.join(this._cacheDir, (this._fileNameIndex++).toString()),
            fileSize: 0
        };
        clearTimeout(cache.timeout);
        //执行存储方法
        await writer(cache.filePath);
        //查询文件大小
        const status = await fs.promises.stat(cache.filePath);
        this._currentSize -= cache.fileSize;
        cache.fileSize = status.blksize || status.size;
        this._currentSize += cache.fileSize;
        cache.refreshTimeoutWhenGet = refreshTimeoutWhenGet;
        if (timeout > 0)
            cache.timeout = setTimeout(() => this.delete(key, cache), timeout);
        if (related)
            cache.related = related;
        this._cacheItems.delete(key); //刷新缓存在列表中的排位
        this._cacheItems.set(key, cache);
    }
    /**
     * 设置或更新缓存
     * @param isAppend 是否以追加到文件末尾的方式写入数据，默认false
     * @param __related 相关缓存(内部使用)
     */
    set(key, value, isAppend = false, timeout = this._defaultTimeout, refreshTimeoutWhenGet = this._defaultRefreshTimeoutWhenGet, __related) {
        return this._prepareWrite(path => {
            if ('string' === typeof value || Buffer.isBuffer(value))
                return fs.promises.writeFile(path, value, { flag: isAppend ? 'a' : 'w' });
            else {
                return new Promise((resolve, reject) => {
                    value.pipe(fs.createWriteStream(path, { flags: isAppend ? 'a' : 'w' }))
                        .on('error', reject)
                        .on('close', resolve);
                });
            }
        }, key, timeout, refreshTimeoutWhenGet, __related);
    }
    /**
     * 通过移动现存文件的方式设置或更新缓存
     * @param from 要移动文件的路径
     * @param __related 相关缓存(内部使用)
     */
    move(key, from, timeout = this._defaultTimeout, refreshTimeoutWhenGet = this._defaultRefreshTimeoutWhenGet, __related) {
        return this._prepareWrite(path => fs.move(from, path), key, timeout, refreshTimeoutWhenGet, __related);
    }
    /**
     * 同时设置多个缓存，并且使得这些缓存具有相互依存关系（无论哪一个被删除了，其他的都将同时被删除）
     *
     * @param items
     * {
     *  key：键,
     *  value：缓存的值,
     *  isAppend：是否以追加到文件末尾的方式写入数据，默认false,
     *  from：文件路径(以移动文件的方式设置缓存),
     *  timeout：缓存超时计时器,
     *  refreshTimeoutWhenGet：获取缓存时是否重置timeout,
     * }
     */
    async setGroup(items) {
        const related = items.map(item => item.key);
        for (const item of items) {
            if (item.from)
                await this.move(item.key, item.from, item.timeout, item.refreshTimeoutWhenGet, related);
            else
                await this.set(item.key, item.value || '', item.isAppend, item.timeout, item.refreshTimeoutWhenGet, related);
        }
    }
    /**
     * 获取缓存
     */
    get(key) {
        const cache = this._cacheItems.get(key);
        if (cache) {
            if (cache.refreshTimeoutWhenGet && cache.timeout) {
                cache.timeout.refresh();
                this._cacheItems.delete(key); //刷新缓存在列表中的排位
                this._cacheItems.set(key, cache);
            }
            return fs.readFile(cache.filePath);
        }
        else
            return Promise.resolve(undefined);
    }
    /**
     * 以流的方式获取缓存
     */
    getStream(key) {
        const cache = this._cacheItems.get(key);
        if (cache) {
            if (cache.refreshTimeoutWhenGet && cache.timeout) {
                cache.timeout.refresh();
                this._cacheItems.delete(key); //刷新缓存在列表中的排位
                this._cacheItems.set(key, cache);
            }
            return fs.createReadStream(cache.filePath);
        }
        else
            return undefined;
    }
    /**
     * 判断缓存是否存在
     */
    has(key) {
        return this._cacheItems.has(key);
    }
    /**
     * 删除缓存
     *
     * @param __cache 要被删除的缓存(内部使用)
     */
    async delete(key, __cache = this._cacheItems.get(key)) {
        if (__cache) {
            this._cacheItems.delete(key);
            clearTimeout(__cache.timeout);
            if (__cache.related) {
                for (const item of __cache.related) {
                    this.delete(item);
                }
            }
            try {
                await fs.remove(__cache.filePath);
                this._currentSize -= __cache.fileSize;
            }
            catch (error) {
                console.error('删除缓存失败:', error);
            }
        }
    }
    /**
     * 清空缓存
     */
    async empty() {
        for (const [key, cache] of this._cacheItems) {
            this._cacheItems.delete(key);
            clearTimeout(cache.timeout);
            try {
                await fs.remove(cache.filePath);
                this._currentSize -= cache.fileSize;
            }
            catch (error) {
                console.error('删除缓存失败:', error);
            }
        }
    }
    /**
     * 销毁缓存
     */
    async destroy() {
        clearInterval(this._cleanerTimer);
        await this.empty();
    }
}
//缓存目录列表，防止某一缓存目录被重复使用
NodeDiskCache._cacheDirList = new Set();
exports.default = NodeDiskCache;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
